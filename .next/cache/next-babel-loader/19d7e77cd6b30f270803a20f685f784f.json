{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport fetch from 'isomorphic-unfetch';\nimport { Layout, SearchBar, BookDetails, BookListBar } from '../components';\n\nvar Homepage = function Homepage() {\n  var _useState = useState({\n    keyword: '',\n    items: [],\n    item: {}\n  }),\n      treatise = _useState[0],\n      setTreatise = _useState[1];\n\n  var _useState2 = useState(new Set()),\n      booklist = _useState2[0],\n      setBookList = _useState2[1];\n\n  var _useState3 = useState(false),\n      showBookListBar = _useState3[0],\n      setShowBookListBar = _useState3[1];\n\n  var _useState4 = useState(false),\n      focusSearch = _useState4[0],\n      setFocusSearch = _useState4[1];\n\n  var toggleBookListBar = function toggleBookListBar() {\n    setShowBookListBar(!showBookListBar); // Toggle the visibility\n  }; // Search book by keyword\n\n\n  var searchHandler = function searchHandler(e) {\n    var keyword = e.target.value;\n\n    if (keyword) {\n      fetch(\"\".concat(process.env.apiUrl, \"/volumes?q=\").concat(keyword, \"&maxResults=5\")).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        if (data.totalItems > 0) {\n          setTreatise(_objectSpread({}, treatise, {\n            keyword: keyword,\n            items: data.items\n          }));\n        }\n      })[\"catch\"](function (err) {\n        return console.log(err);\n      });\n    } else {\n      setTreatise(_objectSpread({}, treatise, {\n        items: []\n      }));\n    }\n  }; // Get specific treatise\n\n\n  var getTreatiseHandler = function getTreatiseHandler(id) {\n    var items = treatise.items;\n    var targetItem = items.filter(function (item) {\n      return item.id === id;\n    })[0];\n    setTreatise({\n      keyword: '',\n      items: [],\n      item: targetItem\n    });\n  };\n\n  var isEmptyObject = function isEmptyObject(obj) {\n    return Object.keys(obj).length === 0;\n  };\n\n  var addBooklist = function addBooklist() {\n    setBookList(function (prevBookList) {\n      return new Set([].concat(_toConsumableArray(prevBookList), [treatise.item]));\n    }); // Update booklist as a new Set with added item\n  };\n\n  var handleFocus = function handleFocus() {\n    setFocusSearch(true);\n  };\n\n  var handleBlur = function handleBlur() {\n    setFocusSearch(false);\n  };\n\n  var keyword = treatise.keyword,\n      items = treatise.items,\n      item = treatise.item;\n  return __jsx(\"div\", null, __jsx(BookListBar, {\n    showBookListBar: showBookListBar,\n    booklist: booklist,\n    toggleBookListBar: toggleBookListBar\n  }), __jsx(Layout, {\n    showBookListBar: !showBookListBar,\n    focusSearch: !focusSearch\n  }, __jsx(Container, null, __jsx(Row, null, __jsx(Col, {\n    md: {\n      span: 8,\n      offset: 2\n    }\n  }, __jsx(SearchBar, {\n    value: keyword,\n    data: items,\n    booklist: booklist,\n    changeHandler: searchHandler,\n    clickHandler: getTreatiseHandler,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    toggleBookListBar: toggleBookListBar\n  }), isEmptyObject(item) ? __jsx(React.Fragment, null) : __jsx(BookDetails, {\n    data: item,\n    addBooklist: addBooklist\n  }))))));\n};\n\nexport default Homepage;","map":null,"metadata":{},"sourceType":"module"}