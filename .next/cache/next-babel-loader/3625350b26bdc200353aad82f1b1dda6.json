{"ast":null,"code":"var _jsxFileName = \"F:\\\\Next\\\\google-books\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport fetch from 'isomorphic-unfetch';\nimport { Layout, SearchBar, BookDetails, BookListBar } from '../components';\n\nconst Homepage = () => {\n  const {\n    0: treatise,\n    1: setTreatise\n  } = useState({\n    keyword: '',\n    items: [],\n    item: {}\n  });\n  const {\n    0: booklist,\n    1: setBookList\n  } = useState(new Set()); // Search book by keyword\n\n  const searchHandler = e => {\n    const keyword = e.target.value;\n\n    if (keyword) {\n      fetch(`${process.env.apiUrl}/volumes?q=${keyword}&maxResults=5`).then(res => res.json()).then(data => {\n        if (data.totalItems > 0) {\n          setTreatise(_objectSpread({}, treatise, {\n            keyword: keyword,\n            items: data.items\n          }));\n        }\n      }).catch(err => console.log(err));\n    } else {\n      setTreatise(_objectSpread({}, treatise, {\n        items: []\n      }));\n    }\n  }; // Get specific treatise\n\n\n  const getTreatiseHandler = id => {\n    const {\n      items\n    } = treatise;\n    const targetItem = items.filter(item => {\n      return item.id === id;\n    })[0];\n    setTreatise({\n      keyword: '',\n      items: [],\n      item: targetItem\n    });\n  };\n\n  const isEmptyObject = obj => {\n    return Object.keys(obj).length === 0;\n  };\n\n  const addBooklist = () => {\n    setBookList(prevBookList => new Set([...prevBookList, item])); // Update booklist as a new Set with added item\n  };\n\n  const {\n    keyword,\n    items,\n    item\n  } = treatise;\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, __jsx(BookListBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }), __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, __jsx(Col, {\n    md: {\n      span: 8,\n      offset: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 15\n    }\n  }, __jsx(SearchBar, {\n    value: keyword,\n    data: items,\n    booklist: booklist,\n    changeHandler: searchHandler,\n    clickHandler: getTreatiseHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }), isEmptyObject(item) ? __jsx(React.Fragment, null) : __jsx(BookDetails, {\n    data: item,\n    addBooklist: addBooklist,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 49\n    }\n  }))))));\n};\n\nexport default Homepage;","map":{"version":3,"sources":["F:/Next/google-books/pages/index.js"],"names":["useState","Container","Row","Col","fetch","Layout","SearchBar","BookDetails","BookListBar","Homepage","treatise","setTreatise","keyword","items","item","booklist","setBookList","Set","searchHandler","e","target","value","process","env","apiUrl","then","res","json","data","totalItems","catch","err","console","log","getTreatiseHandler","id","targetItem","filter","isEmptyObject","obj","Object","keys","length","addBooklist","prevBookList","span","offset"],"mappings":"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","sourcesContent":["  import { useState } from 'react';\r\n  import { Container, Row, Col } from 'react-bootstrap';\r\n  import fetch from 'isomorphic-unfetch';\r\n\r\n  import { Layout, SearchBar, BookDetails, BookListBar } from '../components';\r\n\r\n  const Homepage = () => {\r\n    const [treatise, setTreatise] = useState({\r\n      keyword: '',\r\n      items: [],\r\n      item: {}\r\n    });\r\n\r\n    const [booklist, setBookList] = useState(new Set());\r\n\r\n    // Search book by keyword\r\n    const searchHandler = ( e ) => {\r\n      const keyword = e.target.value;\r\n\r\n      if (keyword) {\r\n        fetch(`${process.env.apiUrl}/volumes?q=${keyword}&maxResults=5`)\r\n          .then( res => res.json() )\r\n          .then( data => {\r\n            if (data.totalItems > 0) {\r\n              setTreatise({ \r\n                ...treatise,\r\n                keyword: keyword,\r\n                items: data.items\r\n              });\r\n            }\r\n          })\r\n          .catch( (err) => console.log(err) );\r\n      } else {\r\n        setTreatise({ \r\n          ...treatise,\r\n          items: [] \r\n        });\r\n      }\r\n    }\r\n\r\n    // Get specific treatise\r\n    const getTreatiseHandler = ( id ) => {\r\n      const { items } = treatise;\r\n      const targetItem = items.filter(item => { return item.id === id })[0];\r\n      \r\n      setTreatise({\r\n        keyword: '',\r\n        items: [],\r\n        item: targetItem\r\n      });\r\n    }\r\n\r\n    const isEmptyObject = ( obj ) => {\r\n      return Object.keys(obj).length === 0;\r\n    }\r\n\r\n    const addBooklist = () => {\r\n      setBookList(prevBookList => new Set([...prevBookList, item])); // Update booklist as a new Set with added item\r\n    }\r\n\r\n    const { keyword, items, item } = treatise;\r\n    \r\n    return (\r\n      <div>\r\n        <BookListBar />\r\n        <Layout>\r\n          <Container>\r\n            <Row>\r\n              <Col md={{ span: 8, offset: 2 }}>\r\n                <SearchBar\r\n                  value={keyword}\r\n                  data={items}\r\n                  booklist={booklist}\r\n                  changeHandler={searchHandler}\r\n                  clickHandler={getTreatiseHandler}\r\n                />\r\n                {\r\n                  isEmptyObject(item) ? <></> : <BookDetails data={item} addBooklist = {addBooklist}/>\r\n                }\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Layout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Homepage;"]},"metadata":{},"sourceType":"module"}