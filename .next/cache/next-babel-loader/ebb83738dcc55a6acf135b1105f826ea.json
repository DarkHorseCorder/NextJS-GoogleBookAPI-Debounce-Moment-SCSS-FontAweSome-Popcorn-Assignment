{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport fetch from 'isomorphic-unfetch';\nimport { Layout, SearchBar, BookDetails, BookListBar } from '../components';\n\nconst Homepage = () => {\n  const {\n    0: treatise,\n    1: setTreatise\n  } = useState({\n    keyword: '',\n    items: [],\n    item: {}\n  });\n  const {\n    0: booklist,\n    1: setBookList\n  } = useState(new Set());\n  const {\n    0: showBookListBar,\n    1: setShowBookListBar\n  } = useState(false);\n  const {\n    0: focusSearch,\n    1: setFocusSearch\n  } = useState(false);\n\n  const toggleBookListBar = () => {\n    setShowBookListBar(!showBookListBar); // Toggle the visibility\n  }; // Search book by keyword\n\n\n  const searchHandler = e => {\n    const keyword = e.target.value;\n\n    if (keyword) {\n      fetch(`${process.env.apiUrl}/volumes?q=${keyword}&maxResults=5`).then(res => res.json()).then(data => {\n        if (data.totalItems > 0) {\n          setTreatise(_objectSpread({}, treatise, {\n            keyword: keyword,\n            items: data.items\n          }));\n        }\n      }).catch(err => console.log(err));\n    } else {\n      setTreatise(_objectSpread({}, treatise, {\n        items: []\n      }));\n    }\n  }; // Get specific treatise\n\n\n  const getTreatiseHandler = id => {\n    const {\n      items\n    } = treatise;\n    const targetItem = items.filter(item => item.id === id)[0];\n    setTreatise({\n      keyword: '',\n      items: [],\n      item: targetItem\n    });\n  };\n\n  const isEmptyObject = obj => {\n    return Object.keys(obj).length === 0;\n  };\n\n  const addBooklist = () => {\n    setBookList(prevBookList => new Set([...prevBookList, treatise.item])); // Update booklist as a new Set with added item\n  };\n\n  const handleFocus = () => {\n    setFocusSearch(true);\n  };\n\n  const handleBlur = () => {\n    setFocusSearch(false);\n  };\n\n  const {\n    keyword,\n    items,\n    item\n  } = treatise;\n  return __jsx(\"div\", null, __jsx(BookListBar, {\n    showBookListBar: showBookListBar,\n    booklist: booklist,\n    toggleBookListBar: toggleBookListBar\n  }), __jsx(Layout, {\n    showBookListBar: !showBookListBar,\n    focusSearch: !focusSearch\n  }, __jsx(Container, null, __jsx(Row, null, __jsx(Col, {\n    md: {\n      span: 8,\n      offset: 2\n    }\n  }, __jsx(SearchBar, {\n    value: keyword,\n    data: items,\n    booklist: booklist,\n    changeHandler: searchHandler,\n    clickHandler: getTreatiseHandler,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    toggleBookListBar: toggleBookListBar\n  }), isEmptyObject(item) ? __jsx(React.Fragment, null) : __jsx(BookDetails, {\n    data: item,\n    addBooklist: addBooklist\n  }))))));\n};\n\nexport default Homepage;","map":null,"metadata":{},"sourceType":"module"}